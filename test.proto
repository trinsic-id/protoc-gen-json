syntax = "proto3";

import "google/protobuf/descriptor.proto";

package trinsic.protoc.gen.json.test;

option (file_option) = "file option";

extend google.protobuf.FileOptions {
  optional string file_option = 50000;
}

extend google.protobuf.MessageOptions {
  optional string message_option = 50000;
}

extend google.protobuf.FieldOptions {
  optional string field_option = 50000;
}

extend google.protobuf.EnumOptions {
  optional string enum_option = 50000;
}

extend google.protobuf.EnumValueOptions {
  optional string enum_value_option = 50000;
}

extend google.protobuf.ServiceOptions {
  optional string service_option = 50000;
}

extend google.protobuf.MethodOptions {
  optional string method_option = 50000;
}

// Just a simple, hardworking enum
enum TestEnum {
  option (enum_option) = "enum option";

  // Foo's value is 0. Foo indeed.
  FOO = 0 [(enum_value_option) = "enum value option"];
  // Bar's value is 1. We don't like bar.
  BAR = 1;
}

// A message which is referenced as the field type for
// a field in another message
message TestReferencedMessage {
  option (message_option) = "message option";

  // A string field
  string test_string_field = 1;
  // Optional field
  optional string test_optional_field = 2;
}

// A message
message TestMessage {
  // A message which is defined in another message
  message TestSubMessage {
    // A field in a message which is defined in another message
    // (...at the bottom of the sea)
    int64 test_sub_field = 1;
  }

  // A field with a type pointing to a message defined in another message.
  // This field also has a custom field option set on it.
  TestSubMessage test_sub_message_field = 1 [(field_option) = "field option"];

  // A field with a type pointing to a message defined externally
  TestReferencedMessage test_ref_field = 2;

  // A field with a primitive type
  int64 test_primitive_field = 3;

  // A field with an enum type
  TestEnum test_enum_field = 4;
}


// A message which is the input to a Method
message TestInputMessage {
  sint32 test_input_field = 1;
}

// A message which is the output of a Method
message TestOutputMessage {
  bool test_output_field = 2;
}

// A service
service TestService {
  option (service_option) = "service option";

  // A method defined in a service
  rpc TestMethod              (TestInputMessage)             returns (TestOutputMessage) {
    option deprecated = true;
    option (method_option) = "method option";
  }
}